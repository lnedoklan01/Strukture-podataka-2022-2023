#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h> 
#include<string.h> 
#include<stdlib.h> 
#include <malloc.h>
#define LINE_MAX 1024
#define COUNT 10

struct _tree;
typedef struct _tree* position;

typedef struct _tree {
	int broj;
	position left;
	position right;
}tree;

int menu();
int decision();
int menu_ispisa();

position make_element();
position insert(position current, position novi);

int trazi_element(position current, int trazeni);
position DeleteElement(position current, int element);		
position FindMin(position current);
position FindMax(position current);


position inorder(position current);
position preorder(position current);
position postorder(position current);
position levelorder(position root);
position trenutna_razina(position root, int level);
int visina(position current);



int main()
{
	position root =NULL;
	position temp = NULL;
	int broj_elemenata = 0;
	int choice = 0;
	int wrong_input = 0;
	int brisanje = 0;
	int search = 0;
	int odluka_ispisa = 0;

	menu();
		do
		{
			choice = decision();
			if ((choice <= 5) && (choice >= 0))
			{
				wrong_input = 0;
				switch (choice)
				{
				case 0:
				{
					printf("Odabrali ste: Ispis meni\n\n");
					menu();
					break;
				}
				case 1:
				{
					printf("Odabrali ste: Dodavanje elementa\n");
					temp = make_element();
					if (broj_elemenata == 0)
					{
						root = temp;
						broj_elemenata++;
					}
					else
					{
						root = insert(root, temp);
						broj_elemenata++;
					}
					break;
				}
				case 2:
				{
					printf("Odabrali ste: Brisanje elementa\n");
					printf("Koji element zelite obrisati: ");
					scanf("%d", &brisanje);
					root = DeleteElement(root, brisanje);
					broj_elemenata--;
					break;
				}
				case 3:
				{
					printf("Odabrali ste: Ispisivanje elemenata\n");
					menu_ispisa();
					do
					{
						odluka_ispisa = decision();
						if ((odluka_ispisa >= 0) && (odluka_ispisa <= 5))
						{
							switch (odluka_ispisa)
							{
							case 0:
							{
								puts("");
								menu_ispisa();
								break;
							}
							case 1:
							{
								inorder(root);
								puts("");
								break;
							}
							case 2:
							{
								preorder(root);
								puts("");
								break;
							}
							case 3:
							{
								postorder(root);
								puts("");
								break;
							}
							case 4:
							{
								levelorder(root);
								puts("");
								break;
							}
							case 5:
							{
								break;
							}
							default:
							{
								perror("greska");
								break;
							}
							}
						}
						else if ((odluka_ispisa < 0) || (odluka_ispisa > 4))
						{
							wrong_input++;
							printf("pogresan unos");
						}
					} while ((wrong_input != 3) && ((odluka_ispisa > 6) || (odluka_ispisa < 0)));
					break;
				}
				case 4:
				{
					printf("Odabrali ste: Ispitati postoji li element\n");
					printf("\nUnesite element koji trazite: ");
					scanf_s(" %d", &search);
					if (trazi_element(root, search))
						printf("\nElement postoji vec ste ga unijeli\n");
					else
						printf("\nTaj element jos nije unesen\n");
					break;
				}
				case 5:
				{
					printf("Odabrali ste: Kraj programa\n");
					printf("\nDovidenja\n\n\n\n\n\n\n\n");
					break;
				}
				default:
				{
					perror("greska");
					break;
				}
				}
			}
			else if ((choice < 0) || (choice > 5))
			{
				wrong_input++;
				printf("pogresan odabir\n");
			}

		} while ((choice != 5) && (wrong_input != 3));

		if (wrong_input == 3)
		{
			printf("\npogresan unos! kraj programa!\n\n\n\n\n\n");
		}
}

int menu()
{
	printf("Izaberite sto zelite raditi\n");
	printf("0-Menu\n");
	printf("1-Dodaj element\n");
	printf("2-Brisi element\n");
	printf("3-Ispisi elemente\n");
	printf("4-Ispitivanje postoji li element\n");
	printf("5-Kraj programa\n");
	return EXIT_SUCCESS;
}

int menu_ispisa()
{
	printf("\nKakav ispis zelite?\n");
	printf("0-opet ispisi meni\n");
	printf("1-inoreder\n");
	printf("2-preoreder\n");
	printf("3-postoreder\n");
	printf("4-levelorder\n");
	printf("5-Ne zelim ispis\n");
	return EXIT_SUCCESS;
}

int decision()
{
	int odluka;
	printf("\nSto cemo radit: ");
	scanf(" %d", &odluka);
	puts("");
	return odluka;
}

position make_element()
{
	position new = NULL;
	new = (position)malloc(sizeof(tree));
	printf("Unesite broj: ");
	scanf_s(" %d", &new->broj);
	new->left = NULL;
	new->right = NULL;
	return new;
}

position insert(position current, position novi)
{
	if (current == NULL)
	{
		return novi;
	}
	if ((current->broj) < (novi->broj))
	{
		current->right = insert(current->right, novi);
	}
	else if ((current->broj) > (novi->broj))
	{
		current->left = insert(current->left, novi);
	}
	else
	{
		free(novi);
	}
	return current;
}

int trazi_element(position current, int trazeni)
{
	if (current == NULL)
	{
		return 0;
	}

	if (current->broj == trazeni)
	{
		return 1;
	}

	if (trazeni > current->broj)
	{
		return trazi_element(current->left, trazeni);
	}

	else
	{
		return trazi_element(current->right, trazeni);
	}
}

position inorder(position current)
{
	if (current != NULL)
	{
		inorder(current->left);
		printf("%d ", current->broj);
		inorder(current->right);
	}
	return EXIT_SUCCESS;
}

position preorder(position current)
{
	if (current != NULL)
	{
		printf("%d ", current->broj);
		preorder(current->left);
		preorder(current->right);
	}
	return EXIT_SUCCESS;
}

position postorder(position current)
{
	if (current != NULL)
	{
		postorder(current->left);
		postorder(current->right);
		printf("%d ", current->broj);
	}
	return EXIT_SUCCESS;
}

position DeleteElement(position current, int element)	
{
	position temp = NULL;

	if (current == NULL)
	{
		printf("Nazalost ne postoji taj element\n");
		return current;
	}
	if (element < current->broj)
	{
		current->left = DeleteElement(current->left, element);
	}
	else if (element > current->broj)
	{
		current->right = DeleteElement(current->right, element);
	}
	else
	{
		if (current->right == NULL && current->left == NULL)
		{
			free(current);
			return NULL;
		}
		else if (current->left != NULL)
		{
			position result = FindMax(current->left);				
			current->broj = result->broj;
			current->left = DeleteElement(current->left, result->broj);
			return current;
		}
		else	//if (current->right!=NULL)  
		{
			position result = FindMin(current->right);				
			current->broj = result->broj;
			current->right = DeleteElement(current->right, result->broj);
			return current;
		}
	}
	return current;
}

position FindMin(position current)	
{
	if (current == NULL)
	{
		return NULL;
	}
	else if (current->left == NULL)
	{
		return current;
	}
	else
	{
		return FindMin(current->left);
	}
}
position FindMax(position current)
{
	if (current == NULL)
	{
		return NULL;
	}
	while (current->right != NULL)
	{
		current = current->right;
	}
	return current;
}
position levelorder(position current)
{
	int h = visina(current);
	int i;
	for (i = 1; i <= h; i++)
		trenutna_razina(current, i);
	return EXIT_SUCCESS;
}
position trenutna_razina(position current, int level)
{
	if (current == NULL)
		return EXIT_SUCCESS;
	if (level == 1)
		printf("%d ", current->broj);
	else if (level > 1) {
		trenutna_razina(current->left, level - 1);
		trenutna_razina(current->right, level - 1);
	}
	return EXIT_SUCCESS;
}

int visina(position current)
{
	if ( current== NULL)
		return 0;
	else {
		/* compute the visina of each subtree */
		int lvisina = visina(current->left);
		int rvisina = visina(current->right);

		/* use the larger one */
		if (lvisina > rvisina)
			return (lvisina + 1);
		else
			return (rvisina + 1);
	}
}
